{
  "name": "jquery-color",
  "title": "jQuery Color",
  "description": "jQuery plugin for color manipulation and animation support.",
  "version": "2.1.1",
  "homepage": "https://github.com/jquery/jquery-color",
  "author": {
    "name": "jQuery Foundation and other contributors",
    "url": "https://github.com/jquery/jquery-color/blob/master/AUTHORS.txt"
  },
  "maintainers": [
    {
      "name": "Corey Frang",
      "email": "gnarf37@gmail.com",
      "url": "http://gnarf.net"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/jquery/jquery-color.git"
  },
  "bugs": "https://github.com/jquery/jquery-color/issues",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jquery/jquery-color/blob/master/MIT-LICENSE.txt"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "grunt": "~0.3.17",
    "grunt-compare-size": ">=0.1.4",
    "grunt-git-authors": "1.0.0",
    "testswarm": "0.2.2"
  },
  "keywords": [
    "color",
    "animation"
  ],
  "readme": "# jQuery.Color()\n\nHow to build and test jQuery Color\n----------------------------------\n\nFirst, get a copy of the git repo by running:\n\n```shell\ngit clone git://github.com/jquery/jquery-color.git\n```\n\nEnter the directory and install the node dependencies:\n\n```shell\ncd jquery-color && npm install\n```\n\nMake sure you have `grunt` installed by testing:\n\n```shell\ngrunt -version\n```\n\nIf not, run:\n\n```shell\nnpm install -g grunt\n```\n\nTo run tests locally, run `grunt`, and this will run the tests in PhantomJS.\n\nYou can also run the tests in a browser by navigating to the `test/` directory, but first run `grunt` to install submodules.\n\n## Animated colors\n\nThis plugins installs a [`cssHook`](http://api.jquery.com/jQuery.cssHooks/) which allows jQuery's [`.animate()`](http://api.jquery.com/animate) to animate between two colors.\n\nSupported Properties\n-------\n`backgroundColor`, `borderBottomColor`, `borderLeftColor`, `borderRightColor`, `borderTopColor`, `color`, `columnRuleColor`, `outlineColor`, `textDecorationColor`, `textEmphasisColor`\n\nExample Use\n-------\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\ndiv {\nbackground-color:#bada55;\nwidth:100px;\nborder:1px solid green;\n}\n</style>\n<script src=\"http://code.jquery.com/jquery-1.6.1.min.js\"></script>\n<script src=\"jquery.color.min.js\"></script>\n</head>\n<body>\n<button id=\"go\">Simple</button>\n<button id=\"sat\">Desaturate</button>\n  <div id=\"block\">Hello!</div>\n<script>\njQuery(\"#go\").click(function(){\n  jQuery(\"#block\").animate({\n      backgroundColor: \"#abcdef\"\n  }, 1500 );\n});\njQuery(\"#sat\").click(function(){\n  jQuery(\"#block\").animate({\n      backgroundColor: jQuery.Color({ saturation: 0 })\n  }, 1500 );\n});\n</script>\n</body>\n</html>\n```\n\n## Supporting other properties\nThe `jQuery.Color.hook()` function can be called to support additional css properties as colors, and allow them to be animated.\n\nExample Use\n-----------\n```javascript\n// we want to animate SVG fill and stroke properties\njQuery.Color.hook( \"fill stroke\" );\n```\n\n## The jQuery.Color Factory\n\nThe `jQuery.Color()` function allows you to create and manipulate color objects that are accepted by jQuery's `.animate()` and `.css()` functions.\n\n* Returns a new Color object, similar to `jQuery()` or `jQuery.Event`\n* Accepts many formats to create a new Color object with a `jQuery.Color.fn` prototype\n\n### Example uses:\n\n```javascript\n// Parsing String Colors:\njQuery.Color( \"#abcdef\" );\njQuery.Color( \"rgb(100,200,255)\" );\njQuery.Color( \"rgba(100,200,255,0.5)\" );\njQuery.Color( \"aqua\" );\n\n// Creating Color Objects in Code:\n// use null or undefined for values you wish to leave out\njQuery.Color( red, green, blue, alpha );\njQuery.Color([ red, green, blue, alpha ]);\njQuery.Color({ red: red, green: green, blue: blue, alpha: alpha });\njQuery.Color({ hue: hue, saturation: saturation, lightness: lightness, alpha: alpha });\n\n// Helper to get value from CSS\njQuery.Color( element, cssProperty );\n```\n## jQuery.Color.fn / prototype / the Color Object methods\n\n### Getters / Setters:\n\n```javascript\nred()             // returns the \"red\" component of the color ( Integer from 0 - 255 )\nred( val )        // returns a copy of the color object with the red set to val\ngreen()           // returns the \"green\" component of the color from ( Integer from 0 - 255 )\ngreen( val )      // returns a copy of the color object with the green set to val\nblue()            // returns the \"blue\" component of the color from ( Integer from 0 - 255 )\nblue( val )       // returns a copy of the color object with the blue set to val\nalpha()           // returns the \"alpha\" component of the color from ( Float from 0.0 - 1.0 )\nalpha( val )      // returns a copy of the color object with the alpha set to val\nhue()             // returns the \"hue\" component of the color ( Integer from 0 - 359 )\nhue( val )        // returns a copy of the color object with the hue set to val\nsaturation()      // returns the \"saturation\" component of the color ( Float from 0.0 - 1.0 )\nsaturation( val ) // returns a copy of the color object with the saturation set to val\nlightness()       // returns the \"lightness\" component of the color ( Float from 0.0 - 1.0 )\nlightness( val )  // returns a copy of the color object with the lightness set to val\n// all of the above values can also take strings in the format of \"+=100\" or \"-=100\"\n\nrgba() // returns a rgba \"tuple\" [ red, green, blue, alpha ]\n// rgba() setters: returns a copy of the color with any defined values set to the new value\nrgba( red, green, blue, alpha )\nrgba({ red: red, green: green, blue: blue, alpha: alpha })\nrgba([ red, green, blue, alpha ])\n\nhsla() // returns a HSL tuple [ hue, saturation, lightness, alpha ]\n// much like the rgb setter - returns a copy with any defined values set\nhsla( hue, saturation, lightness, alpha )\nhsla({ hue: hue, saturation: saturation, lightness: lightness, alpha: alpha )\nhsla([ hue, saturation, lightness, alpha ])\n```\n\n### String Methods:\n\n```javascript\ntoRgbaString() // returns a css string \"rgba(255, 255, 255, 0.4)\"\ntoHslaString() // returns a css string \"hsla(330, 75%, 25%, 0.4)\"\ntoHexString( includeAlpha ) // returns a css string \"#abcdef\", with \"includeAlpha\" uses \"#rrggbbaa\" (alpha *= 255)\n```\n\nThe `toRgbaString` and `toHslaString` methods will only include the alpha channel if it is not `1`. They will return `rgb(...)` and `hsl(...)` strings if the alpha is set to `1`. \n### Working with other colors:\n\n```javascript\ntransition( othercolor, distance ) // the color distance ( 0.0 - 1.0 ) of the way between this color and othercolor\nblend( othercolor ) // Will apply this color on top of the other color using alpha blending\nis( othercolor ) // Will determine if this color is equal to all defined properties of othercolor\n```\n\n## jQuery.Color properties\n\n\n## Internals on The Color Object\n* Internally, RGBA values are stored as `color._rgba[0] = red, color._rgba[1] = green, color._rgba[2] = blue, color._rgba[3] = alpha`.  However, please remember there are nice convenient setters and getters for each of these properties.\n* `undefined`/`null` values for colors indicate non-existence. This signals the `transition()` function to keep whatever value was set in the other end of the transition. For example, animating to `jQuery.Color([ 255, null, null, 1 ])` would only animate the red and alpha values of the color.\n\n###`jQuery.Color.names`\n\nA list of named colors is stored on the `jQuery.Color.names` object.  The value they contain should be parseable by `jQuery.Color()`. All names on this object should be lowercased.  I.E. `jQuery.Color(\"Red\")` is the same as doing `jQuery.Color( jQuery.Color.names[\"red\"] );`\n\nThere is also a named color `\"_default\"` which by default is white, this is used for situations where a color is unparseable.\n\n###`\"transparent\"`\n\nA special note about the color `\"transparent\"` - It returns `null` for red green and blue unless you specify colors for these values.\n\n```javascript\njQuery.Color(\"#abcdef\").transition(\"transparent\", 0.5)\n```\n\nAnimating to or from the value `\"transparent\"` will still use \"#abcdef\" for red green and blue.\n\n##HSLA Support\n\nIf a color is created using any of the HSLA functions or parsers, it will keep the `_rgba` array up to date as well as having a `_hsla` array.  Once an RGBA operation is performed on HSLA, however, the `_hsla` cache is removed and all operations will continue based off of rgb (unless you go back into HSLA). The `._hsla` array follows the same format as `._rbga`, `[hue, saturation, lightness, alpha ]`.  If you need to build an HSLA color from an HSLA array, `jQuery.Color().hsla( array )` works for that purpose.\n\n**Colors with 0 saturation, or 100%/0% lightness will be stored with a hue of 0**\n\n##Extensibility\n\nIt is possible for you to add your own functions to the color object.  For instance, this function will tell you if its better to use black or white on a given background color.\n\n\n```javascript\n// method taken from https://gist.github.com/960189\njQuery.Color.fn.contrastColor = function() {\n    var r = this._rgba[0], g = this._rgba[1], b = this._rgba[2];\n    return (((r*299)+(g*587)+(b*144))/1000) >= 131.5 ? \"black\" : \"white\";\n};\n\n// usage examples:\njQuery.Color(\"#bada55\").contrastColor(); // \"black\"\nelement.css( \"color\", jQuery.Color( element, \"backgroundColor\" ).contrastColor() );\n```",
  "readmeFilename": "README.md",
  "_id": "jquery-color@2.1.1"
}